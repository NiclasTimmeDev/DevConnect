{"ast":null,"code":"var _jsxFileName = \"/Users/niclastimm/code/Udemy/MERN/DevConnector/client/src/components/profiles/Profiles.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { getAllProfiles } from \"./../../store/actions/profile\";\nimport ProfileItem from \"./ProfileItem\";\n\nconst Profiles = props => {\n  useEffect(() => {\n    props.getAllProfiles();\n  }, [getAllProfiles]);\n  const profiles = props.profile.profiles.map(pro => {\n    return React.createElement(ProfileItem, {\n      key: pro._id,\n      profile: pro,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    });\n  });\n  return props.profile.loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large primary-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Developers\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fab fa-connectdevelop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), \" Browse and connect with developers\"), React.createElement(\"div\", {\n    className: \"profiles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.profile.profiles.length === 0 ? React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"No Profiles found\") : profiles));\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    profile: state.profile\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getAllProfiles\n})(Profiles);","map":{"version":3,"sources":["/Users/niclastimm/code/Udemy/MERN/DevConnector/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getAllProfiles","ProfileItem","Profiles","props","profiles","profile","map","pro","_id","loading","length","propTypes","getProfiles","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBP,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAACH,cAAN;AACD,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;AAIA,QAAMI,QAAQ,GAAGD,KAAK,CAACE,OAAN,CAAcD,QAAd,CAAuBE,GAAvB,CAA2BC,GAAG,IAAI;AACjD,WAAO,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,GAAG,CAACC,GAAtB;AAA2B,MAAA,OAAO,EAAED,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFgB,CAAjB;AAIA,SAAOJ,KAAK,CAACE,OAAN,CAAcI,OAAd,GACL,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAGL,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,wCAFF,EAME;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACE,OAAN,CAAcD,QAAd,CAAuBM,MAAvB,KAAkC,CAAlC,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,GAGCN,QAJJ,CANF,CAHF;AAkBD,CA3BD;;AA6BAF,QAAQ,CAACS,SAAT,GAAqB;AACnBC,EAAAA,WAAW,EAAEf,SAAS,CAACgB,IAAV,CAAeC,UADT;AAEnBT,EAAAA,OAAO,EAAER,SAAS,CAACkB,MAAV,CAAiBD;AAFP,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLZ,IAAAA,OAAO,EAAEY,KAAK,CAACZ;AADV,GAAP;AAGD,CAJD;;AAMA,eAAeP,OAAO,CAACkB,eAAD,EAAkB;AAAEhB,EAAAA;AAAF,CAAlB,CAAP,CAA6CE,QAA7C,CAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport { getAllProfiles } from \"./../../store/actions/profile\";\nimport ProfileItem from \"./ProfileItem\";\n\nconst Profiles = props => {\n  useEffect(() => {\n    props.getAllProfiles();\n  }, [getAllProfiles]);\n\n  const profiles = props.profile.profiles.map(pro => {\n    return <ProfileItem key={pro._id} profile={pro} />;\n  });\n\n  return props.profile.loading ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      <h1 className=\"large primary-text\">Developers</h1>\n      <p className=\"lead\">\n        <i className=\"fab fa-connectdevelop\"></i> Browse and connect with\n        developers\n      </p>\n      <div className=\"profiles\">\n        {props.profile.profiles.length === 0 ? (\n          <h4>No Profiles found</h4>\n        ) : (\n          profiles\n        )}\n      </div>\n    </Fragment>\n  );\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    profile: state.profile\n  };\n};\n\nexport default connect(mapStateToProps, { getAllProfiles })(Profiles);\n"]},"metadata":{},"sourceType":"module"}