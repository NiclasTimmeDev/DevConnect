{"ast":null,"code":"import axios from \"axios\";\nimport setAlert from \"./alert\";\nimport * as types from \"./types\";\nexport const getPosts = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(\"/api/posts\");\n      dispatch({\n        type: types.GET_POSTS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\nexport const getPost = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`/api/posts/${postId}`);\n      dispatch({\n        type: types.GET_POST,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\nexport const addPost = formData => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await axios.post(\"/api/posts\", formData, config);\n      dispatch({\n        type: types.ADD_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post created\", \"success\"));\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\nexport const addLike = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(`/api/posts/like/${postId}`);\n      dispatch({\n        type: types.UPDATE_LIKES,\n        payload: {\n          postId,\n          likes: res.data\n        }\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\nexport const removeLike = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(`/api/posts/unlike/${postId}`);\n      dispatch({\n        type: types.UPDATE_LIKES,\n        payload: {\n          postId,\n          likes: res.data\n        }\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\nexport const deletePost = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.delete(`/api/posts/${postId}`);\n      dispatch({\n        type: types.DELETE_POST,\n        postId: postId\n      });\n      dispatch(setAlert(\"Post removed\", \"success\"));\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/niclastimm/code/Udemy/MERN/DevConnector/client/src/store/actions/post.js"],"names":["axios","setAlert","types","getPosts","dispatch","res","get","type","GET_POSTS","payload","data","error","console","log","message","POST_ERROR","msg","response","statusText","status","getPost","postId","GET_POST","addPost","formData","config","headers","post","ADD_POST","addLike","put","UPDATE_LIKES","likes","removeLike","deletePost","delete","DELETE_POST"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,YAAV,CAAlB;AACAF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACM,SADL;AAEPC,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,OAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMC,OAAO,GAAGC,MAAM,IAAI;AAC/B,SAAO,MAAMjB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,cAAae,MAAO,EAA/B,CAAlB;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACoB,QADL;AAEPb,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,OAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMI,OAAO,GAAGC,QAAQ,IAAI;AACjC,SAAO,MAAMpB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMqB,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADI,OAAf;AAKA,YAAMrB,GAAG,GAAG,MAAML,KAAK,CAAC2B,IAAN,CAAW,YAAX,EAAyBH,QAAzB,EAAmCC,MAAnC,CAAlB;AAEArB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAAC0B,QADL;AAEPnB,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,OAAD,CAAR;AAIAN,MAAAA,QAAQ,CAACH,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;AACD,KAbD,CAaE,OAAOU,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAxBD;AAyBD,CA1BM;AA4BP,OAAO,MAAMU,OAAO,GAAGR,MAAM,IAAI;AAC/B,SAAO,MAAMjB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAAC8B,GAAN,CAAW,mBAAkBT,MAAO,EAApC,CAAlB;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAAC6B,YADL;AAEPtB,QAAAA,OAAO,EAAE;AAAEY,UAAAA,MAAF;AAAUW,UAAAA,KAAK,EAAE3B,GAAG,CAACK;AAArB;AAFF,OAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMc,UAAU,GAAGZ,MAAM,IAAI;AAClC,SAAO,MAAMjB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAAC8B,GAAN,CAAW,qBAAoBT,MAAO,EAAtC,CAAlB;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAAC6B,YADL;AAEPtB,QAAAA,OAAO,EAAE;AAAEY,UAAAA,MAAF;AAAUW,UAAAA,KAAK,EAAE3B,GAAG,CAACK;AAArB;AAFF,OAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMe,UAAU,GAAGb,MAAM,IAAI;AAClC,SAAO,MAAMjB,QAAN,IAAkB;AACvB,QAAI;AACF,YAAMC,GAAG,GAAG,MAAML,KAAK,CAACmC,MAAN,CAAc,cAAad,MAAO,EAAlC,CAAlB;AACAjB,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACkC,WADL;AAEPf,QAAAA,MAAM,EAAEA;AAFD,OAAD,CAAR;AAIAjB,MAAAA,QAAQ,CAACH,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;AACD,KAPD,CAOE,OAAOU,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAV,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,KAAK,CAACa,UADL;AAEPN,QAAAA,OAAO,EAAE;AACPO,UAAAA,GAAG,EAAEL,KAAK,CAACM,QAAN,CAAeC,UADb;AAEPC,UAAAA,MAAM,EAAER,KAAK,CAACM,QAAN,CAAeE;AAFhB;AAFF,OAAD,CAAR;AAOD;AACF,GAlBD;AAmBD,CApBM","sourcesContent":["import axios from \"axios\";\nimport setAlert from \"./alert\";\nimport * as types from \"./types\";\n\nexport const getPosts = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(\"/api/posts\");\n      dispatch({\n        type: types.GET_POSTS,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n\nexport const getPost = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.get(`/api/posts/${postId}`);\n      dispatch({\n        type: types.GET_POST,\n        payload: res.data\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n\nexport const addPost = formData => {\n  return async dispatch => {\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const res = await axios.post(\"/api/posts\", formData, config);\n\n      dispatch({\n        type: types.ADD_POST,\n        payload: res.data\n      });\n      dispatch(setAlert(\"Post created\", \"success\"));\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n\nexport const addLike = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(`/api/posts/like/${postId}`);\n      dispatch({\n        type: types.UPDATE_LIKES,\n        payload: { postId, likes: res.data }\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n\nexport const removeLike = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.put(`/api/posts/unlike/${postId}`);\n      dispatch({\n        type: types.UPDATE_LIKES,\n        payload: { postId, likes: res.data }\n      });\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n\nexport const deletePost = postId => {\n  return async dispatch => {\n    try {\n      const res = await axios.delete(`/api/posts/${postId}`);\n      dispatch({\n        type: types.DELETE_POST,\n        postId: postId\n      });\n      dispatch(setAlert(\"Post removed\", \"success\"));\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: types.POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}