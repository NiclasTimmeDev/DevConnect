{"ast":null,"code":"import axios from \"axios\";\nimport * as types from \"./types\";\nimport setAlert from \"./alert\";\nimport setAuthToken from \"./../../utils/setAuthToken\";\nexport const loadUser = () => {\n  return async dispatch => {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get(\"/api/auth\");\n      dispatch({\n        type: types.USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: types.AUTH_ERROR\n      });\n    }\n  };\n};\nexport const register = (name, email, password) => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"applicatin/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/users/register\", {\n        name,\n        email,\n        password\n      });\n\n      if (res.status === 201) {\n        localStorage.setItem(\"token\", res.data.token);\n        console.log(localStorage);\n        dispatch({\n          type: types.REGISTER_SUCCESS,\n          payload: res.data\n        });\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.REGISTER_FAIL\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/niclastimm/Desktop/Udemy/MERN/DevConnector/client/src/store/actions/auth.js"],"names":["axios","types","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","USER_LOADED","payload","data","error","AUTH_ERROR","register","name","email","password","config","headers","post","status","setItem","console","log","REGISTER_SUCCESS","errors","response","forEach","msg","REGISTER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBJ,MAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAU,WAAV,CAAlB;AACAJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACU,WADL;AAEPC,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,OAAD,CAAR;AAID,KAND,CAME,OAAOC,KAAP,EAAc;AACdT,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAACc;AADL,OAAD,CAAR;AAGD;AACF,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,KAA2B;AACjD,SAAO,MAAMd,QAAN,IAAkB;AACvB,UAAMe,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;;AAMA,QAAI;AACF,YAAMb,GAAG,GAAG,MAAMR,KAAK,CAACsB,IAAN,CAAW,qBAAX,EAAkC;AAClDL,QAAAA,IADkD;AAElDC,QAAAA,KAFkD;AAGlDC,QAAAA;AAHkD,OAAlC,CAAlB;;AAMA,UAAIX,GAAG,CAACe,MAAJ,KAAe,GAAnB,EAAwB;AACtBjB,QAAAA,YAAY,CAACkB,OAAb,CAAqB,OAArB,EAA8BhB,GAAG,CAACK,IAAJ,CAASN,KAAvC;AACAkB,QAAAA,OAAO,CAACC,GAAR,CAAYpB,YAAZ;AACAD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAET,KAAK,CAAC0B,gBADL;AAEPf,UAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFN,SAAD,CAAR;AAID,OAPD,MAOO,IAAIL,GAAG,CAACe,MAAJ,KAAe,GAAnB,EAAwB;AAC7BE,QAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAG,CAACK,IAAhB;AACD;AACF,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AACd,YAAMc,MAAM,GAAGd,KAAK,CAACe,QAAN,CAAehB,IAAf,CAAoBe,MAAnC;;AAEA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACE,OAAP,CAAehB,KAAK,IAAI;AACtBT,UAAAA,QAAQ,CAACH,QAAQ,CAACY,KAAK,CAACiB,GAAP,EAAY,QAAZ,CAAT,CAAR;AACD,SAFD;AAGD;;AAED1B,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAET,KAAK,CAAC+B;AADL,OAAD,CAAR;AAGD;AACF,GArCD;AAsCD,CAvCM","sourcesContent":["import axios from \"axios\";\nimport * as types from \"./types\";\nimport setAlert from \"./alert\";\nimport setAuthToken from \"./../../utils/setAuthToken\";\n\nexport const loadUser = () => {\n  return async dispatch => {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n    try {\n      const res = await axios.get(\"/api/auth\");\n      dispatch({\n        type: types.USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: types.AUTH_ERROR\n      });\n    }\n  };\n};\n\nexport const register = (name, email, password) => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"applicatin/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/users/register\", {\n        name,\n        email,\n        password\n      });\n\n      if (res.status === 201) {\n        localStorage.setItem(\"token\", res.data.token);\n        console.log(localStorage);\n        dispatch({\n          type: types.REGISTER_SUCCESS,\n          payload: res.data\n        });\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.REGISTER_FAIL\n      });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}