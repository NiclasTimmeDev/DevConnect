{"ast":null,"code":"import axios from \"axios\";\nimport * as types from \"./types\";\nimport setAlert from \"./alert\";\nimport setAuthToken from \"./../../utils/setAuthToken\";\n/*\n1. If token exists, put it to the global header\n2. Try to fetch the logged in user from the db. This will only work if the token in the header is valid\n3. If the token is valid and a user is found, put that user in the redux state\n*/\n\nexport const loadUser = () => {\n  return async dispatch => {\n    //1:\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    } //2:\n\n\n    try {\n      const res = await axios.get(\"/api/auth\"); //3:\n\n      dispatch({\n        type: types.USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: types.AUTH_ERROR\n      });\n    }\n  };\n};\nexport const register = (name, email, password) => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"applicatin/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/users/register\", {\n        name,\n        email,\n        password\n      });\n\n      if (res.status === 201) {\n        localStorage.setItem(\"token\", res.data.token);\n        console.log(localStorage);\n        dispatch({\n          type: types.REGISTER_SUCCESS,\n          payload: res.data\n        });\n        dispatch(loadUser());\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.REGISTER_FAIL\n      });\n    }\n  };\n};\nexport const login = (email, password) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/api/auth/login\", {\n        email,\n        password\n      });\n\n      if (res.status === 200) {\n        localStorage.setItem(\"token\", res.data.token);\n        dispatch({\n          type: types.LOGIN_SUCCESS,\n          payload: res.data\n        });\n        dispatch(loadUser());\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.LOGIN_FAIL\n      });\n    }\n  };\n};\nexport const logout = () => {\n  return dispatch => {\n    dispatch({\n      type: types.LOGOUT\n    });\n  };\n};","map":{"version":3,"sources":["/Users/niclastimm/Desktop/Udemy/MERN/DevConnector/client/src/store/actions/auth.js"],"names":["axios","types","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","USER_LOADED","payload","data","error","AUTH_ERROR","register","name","email","password","config","headers","post","status","setItem","console","log","REGISTER_SUCCESS","errors","response","forEach","msg","REGISTER_FAIL","login","LOGIN_SUCCESS","LOGIN_FAIL","logout","LOGOUT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as types from \"./types\";\nimport setAlert from \"./alert\";\nimport setAuthToken from \"./../../utils/setAuthToken\";\n\n/*\n1. If token exists, put it to the global header\n2. Try to fetch the logged in user from the db. This will only work if the token in the header is valid\n3. If the token is valid and a user is found, put that user in the redux state\n*/\nexport const loadUser = () => {\n  return async dispatch => {\n    //1:\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    //2:\n    try {\n      const res = await axios.get(\"/api/auth\");\n\n      //3:\n      dispatch({\n        type: types.USER_LOADED,\n        payload: res.data\n      });\n    } catch (error) {\n      dispatch({\n        type: types.AUTH_ERROR\n      });\n    }\n  };\n};\n\nexport const register = (name, email, password) => {\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"applicatin/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/users/register\", {\n        name,\n        email,\n        password\n      });\n\n      if (res.status === 201) {\n        localStorage.setItem(\"token\", res.data.token);\n        console.log(localStorage);\n        dispatch({\n          type: types.REGISTER_SUCCESS,\n          payload: res.data\n        });\n        dispatch(loadUser());\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.REGISTER_FAIL\n      });\n    }\n  };\n};\n\nexport const login = (email, password) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/api/auth/login\", {\n        email,\n        password\n      });\n\n      if (res.status === 200) {\n        localStorage.setItem(\"token\", res.data.token);\n        dispatch({\n          type: types.LOGIN_SUCCESS,\n          payload: res.data\n        });\n\n        dispatch(loadUser());\n      } else if (res.status === 400) {\n        console.log(res.data);\n      }\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => {\n          dispatch(setAlert(error.msg, \"danger\"));\n        });\n      }\n\n      dispatch({\n        type: types.LOGIN_FAIL\n      });\n    }\n  };\n};\n\nexport const logout = () => {\n  return dispatch => {\n    dispatch({\n      type: types.LOGOUT\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}